//
// Created by carson on 11/15/21.
//

#ifndef LMSM_ASSEMBLER_H
#define LMSM_ASSEMBLER_H

//===================================================================
//  Error messages
//===================================================================
extern char *ASM_ERROR_UNKNOWN_INSTRUCTION;
extern char *ASM_ERROR_ARG_REQUIRED;
extern char *ASM_ERROR_BAD_LABEL;
extern char *ASM_ERROR_OUT_OF_RANGE;

//===================================================================
//  Represents an instruction for the LMSM architecture
//===================================================================
typedef struct instruction {
    char* instruction;         // the type of the instruction
    char* label;               // the label of the instruction if any
    char* label_reference;     // the label this instruction refers to, if any
    int value;                 // the value of the instruction, if any
    int slots;                // the offset of the instruction, if any
    int offset;                // the offset of the instruction, if any
    struct instruction * next; // the next instruction
} instruction;

//===================================================================
//  The result of an assembly compilation
//===================================================================
typedef struct compilation_result {
    char* error;         // any error that occurred (e.g. a missing label)
    instruction *root;   // the root instruction of the compilation
    int code[100];       // the machine code generated by the assembler
} compilation_result;

//===================================================================
//  API
//===================================================================

instruction * asm_make_instruction(char* type, char *label, char *label_reference, int value, instruction * predecessor);
void asm_delete_instruction(instruction *instruction);

compilation_result *asm_make_compilation_result();
void asm_delete_compilation_result(compilation_result *result);

void asm_parse_src(compilation_result *result, char *original_src);

void asm_gen_code_for_instruction(compilation_result  * result, instruction *instruction);

compilation_result * asm_assemble(char * src);

int asm_is_instruction(char * token);

void asm_delete_compilation_result(compilation_result *result);

#endif //LMSM_ASSEMBLER_H
